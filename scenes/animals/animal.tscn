[gd_scene load_steps=16 format=3 uid="uid://c730r02j0a3ic"]

[ext_resource type="Script" uid="uid://bodcxjeobaic" path="res://scenes/animals/animal.gd" id="1_a68rm"]
[ext_resource type="Texture2D" uid="uid://cjv6h5aem5r4u" path="res://assets/graphics/misc/star_particle.png" id="2_4f3xh"]
[ext_resource type="Script" uid="uid://ffs1brga2vho" path="res://scenes/animals/offscreen_pointer.gd" id="3_to7qb"]
[ext_resource type="Theme" uid="uid://cqid6eqdw6f54" path="res://scenes/ui/ui.tres" id="4_qmecq"]
[ext_resource type="Shader" path="res://globals/outline.gdshader" id="5_ivvwm"]
[ext_resource type="Texture2D" uid="uid://b0pe6g1bqt4xu" path="res://assets/graphics/animals/kick_icon.png" id="6_dufb3"]

[sub_resource type="Shader" id="Shader_ivvwm"]
code = "shader_type canvas_item;

uniform vec4 line_color : source_color = vec4(1.0); // Color of the outline
uniform float width : hint_range(0, 10) = 0.0; // Width of the outline


// Offsets to check neighboring pixels for the outline
const vec2 OFFSETS[8] = vec2[](
    vec2(-1, -1), vec2(-1, 0), vec2(-1, 1),
    vec2(0, -1), vec2(0, 1),
    vec2(1, -1), vec2(1, 0), vec2(1, 1)
);

void vertex() {
    // Add margin to the original sprite vertices based on the outline width
    // This scales up the sprite, which will be scaled down later in the fragment() function
    VERTEX += (UV * 2.0 - 1.0) * width;
}

void fragment() {
    // Sample the color from the original texture
    vec4 color = texture(TEXTURE, UV);

    if (width > 0.0) {
        // Calculate the real texture size from the texture pixel size
        vec2 real_texture_size = 1.0 / TEXTURE_PIXEL_SIZE;

        // Calculate the size of the texture with the added margin for the outline
        vec2 added_margin_texture_pixel_size = 1.0 / (real_texture_size + (width * 2.0));

        // Calculate the width in texture coordinates
        vec2 width_size = added_margin_texture_pixel_size * width;

        // Shift the UV coordinates to account for the added margin
        vec2 shifted_uv = UV - width_size;

        // Calculate the ratio to scale down the UV coordinates to the original size
        vec2 ratio = TEXTURE_PIXEL_SIZE / added_margin_texture_pixel_size;
        vec2 scaled_shifted_uv = shifted_uv * ratio;

        // Sample the original texture with the adjusted UV to scale it back to the original size
        vec4 original_color = texture(TEXTURE, scaled_shifted_uv);

        // Check if the adjusted UV coordinates are outside the bounds of the texture
        if (scaled_shifted_uv.x < 0.0 || scaled_shifted_uv.x > 1.0 || scaled_shifted_uv.y < 0.0 || scaled_shifted_uv.y > 1.0) {
            original_color.a = 0.0; // Set alpha to 0 to remove artifacts outside the sprite boundary
        }

        // Initialize the outline alpha value
        float outline = 0.0;

        // Sum the alpha values of the neighboring pixels to create the outline
        for (int i = 0; i < 8; i++) {
            outline += texture(TEXTURE, scaled_shifted_uv + OFFSETS[i] * width_size).a;

        }

        // Clamp the outline value to a maximum of 1.0
        outline = min(outline, 1.0);

        // Mix the original color with the outline color based on the outline alpha value
        color = mix(original_color, line_color, outline - original_color.a);
    }

    // Set the final color of the fragment
    COLOR = color;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ivvwm"]
shader = SubResource("Shader_ivvwm")
shader_parameter/line_color = Color(1, 0, 0, 1)
shader_parameter/width = 0.0

[sub_resource type="Animation" id="Animation_qmecq"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(1, 1)]
}

[sub_resource type="Animation" id="Animation_dfea1"]
resource_name = "grow"
loop_mode = 2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:scale")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(0.8, 0.8), Vector2(1, 1)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_ivvwm"]
_data = {
&"RESET": SubResource("Animation_qmecq"),
&"grow": SubResource("Animation_dfea1")
}

[sub_resource type="Animation" id="Animation_dufb3"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(-7, -34)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 1)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath(".:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}

[sub_resource type="Animation" id="Animation_ivvwm"]
resource_name = "update counter"
length = 0.75
step = 0.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:position")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.5),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(-21, -34), Vector2(-21, -60)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.5, 0.75),
"transitions": PackedFloat32Array(1, 1, 3.24901),
"update": 0,
"values": [Color(1, 1, 1, 0), Color(1, 1, 1, 1), Color(1, 1, 1, 0)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath(".:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.75),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_v6psc"]
_data = {
&"RESET": SubResource("Animation_dufb3"),
&"update counter": SubResource("Animation_ivvwm")
}

[sub_resource type="ShaderMaterial" id="ShaderMaterial_v6psc"]
shader = ExtResource("5_ivvwm")
shader_parameter/line_color = Color(1, 1, 1, 1)
shader_parameter/width = 0.25

[node name="Animal" type="CharacterBody2D" groups=["Animals"]]
collision_layer = 2
collision_mask = 30
motion_mode = 1
script = ExtResource("1_a68rm")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
material = SubResource("ShaderMaterial_ivvwm")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]

[node name="KickRange" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="KickRange"]

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]

[node name="KickParticles" type="CPUParticles2D" parent="."]
emitting = false
amount = 5
texture = ExtResource("2_4f3xh")
lifetime = 0.5
one_shot = true
speed_scale = 2.0
explosiveness = 0.09
randomness = 0.05
emission_shape = 1
emission_sphere_radius = 24.27
direction = Vector2(0, 1)
spread = 180.0
gravity = Vector2(0, 0)
initial_velocity_min = 10.1
initial_velocity_max = 131.11
angular_velocity_min = 14.55
angular_velocity_max = 87.28
damping_min = 3.03
damping_max = 9.091
angle_max = 180.0
scale_amount_min = 0.5
scale_amount_max = 0.7

[node name="StunTimer" type="Timer" parent="."]
one_shot = true

[node name="OffscreenPointer" type="Sprite2D" parent="."]
visible = false
script = ExtResource("3_to7qb")

[node name="AnimationPlayer" type="AnimationPlayer" parent="OffscreenPointer"]
libraries = {
&"": SubResource("AnimationLibrary_ivvwm")
}
autoplay = "grow"

[node name="RandomMovementTimer" type="Timer" parent="."]
wait_time = 1.5

[node name="ComboCounter" type="Label" parent="."]
visible = false
offset_left = -7.0
offset_top = -34.0
offset_right = 33.0
offset_bottom = -3.0
theme = ExtResource("4_qmecq")
theme_override_colors/font_color = Color(0.863421, 0.000126439, 6.98858e-05, 1)
theme_override_colors/font_shadow_color = Color(0, 0, 0, 1)
theme_override_font_sizes/font_size = 20
text = "x1"
horizontal_alignment = 1

[node name="AnimationPlayer" type="AnimationPlayer" parent="ComboCounter"]
libraries = {
&"": SubResource("AnimationLibrary_v6psc")
}

[node name="KickIcon" type="Sprite2D" parent="."]
visible = false
material = SubResource("ShaderMaterial_v6psc")
scale = Vector2(0.75, 0.75)
texture = ExtResource("6_dufb3")

[connection signal="body_entered" from="KickRange" to="." method="_on_kick_range_body_entered"]
[connection signal="body_exited" from="KickRange" to="." method="_on_kick_range_body_exited"]
[connection signal="timeout" from="StunTimer" to="." method="_on_stun_timer_timeout"]
[connection signal="timeout" from="RandomMovementTimer" to="." method="_on_random_movement_timer_timeout"]
