[gd_scene load_steps=28 format=3 uid="uid://bfmmdybm5lt0r"]

[ext_resource type="PackedScene" uid="uid://c730r02j0a3ic" path="res://scenes/animals/animal.tscn" id="1_c136b"]
[ext_resource type="Texture2D" uid="uid://drnvkb6n7d4os" path="res://assets/graphics/animals/cow.png" id="2_a5y40"]
[ext_resource type="Texture2D" uid="uid://bdhe66r4fqjbh" path="res://assets/graphics/animals/cow_stun.png" id="3_6t8lt"]
[ext_resource type="Texture2D" uid="uid://dbig02d2brbjh" path="res://assets/graphics/animals/cow_pointer.png" id="3_r1mxx"]

[sub_resource type="Shader" id="Shader_jhwbb"]
code = "shader_type canvas_item;

uniform vec4 line_color : source_color = vec4(1.0); // Color of the outline
uniform float width : hint_range(0, 10) = 0.0; // Width of the outline


// Offsets to check neighboring pixels for the outline
const vec2 OFFSETS[8] = vec2[](
    vec2(-1, -1), vec2(-1, 0), vec2(-1, 1),
    vec2(0, -1), vec2(0, 1),
    vec2(1, -1), vec2(1, 0), vec2(1, 1)
);

void vertex() {
    // Add margin to the original sprite vertices based on the outline width
    // This scales up the sprite, which will be scaled down later in the fragment() function
    VERTEX += (UV * 2.0 - 1.0) * width;
}

void fragment() {
    // Sample the color from the original texture
    vec4 color = texture(TEXTURE, UV);

    if (width > 0.0) {
        // Calculate the real texture size from the texture pixel size
        vec2 real_texture_size = 1.0 / TEXTURE_PIXEL_SIZE;

        // Calculate the size of the texture with the added margin for the outline
        vec2 added_margin_texture_pixel_size = 1.0 / (real_texture_size + (width * 2.0));

        // Calculate the width in texture coordinates
        vec2 width_size = added_margin_texture_pixel_size * width;

        // Shift the UV coordinates to account for the added margin
        vec2 shifted_uv = UV - width_size;

        // Calculate the ratio to scale down the UV coordinates to the original size
        vec2 ratio = TEXTURE_PIXEL_SIZE / added_margin_texture_pixel_size;
        vec2 scaled_shifted_uv = shifted_uv * ratio;

        // Sample the original texture with the adjusted UV to scale it back to the original size
        vec4 original_color = texture(TEXTURE, scaled_shifted_uv);

        // Check if the adjusted UV coordinates are outside the bounds of the texture
        if (scaled_shifted_uv.x < 0.0 || scaled_shifted_uv.x > 1.0 || scaled_shifted_uv.y < 0.0 || scaled_shifted_uv.y > 1.0) {
            original_color.a = 0.0; // Set alpha to 0 to remove artifacts outside the sprite boundary
        }

        // Initialize the outline alpha value
        float outline = 0.0;

        // Sum the alpha values of the neighboring pixels to create the outline
        for (int i = 0; i < 8; i++) {
            outline += texture(TEXTURE, scaled_shifted_uv + OFFSETS[i] * width_size).a;

        }

        // Clamp the outline value to a maximum of 1.0
        outline = min(outline, 1.0);

        // Mix the original color with the outline color based on the outline alpha value
        color = mix(original_color, line_color, outline - original_color.a);
    }

    // Set the final color of the fragment
    COLOR = color;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_nc6fi"]
resource_local_to_scene = true
shader = SubResource("Shader_jhwbb")
shader_parameter/line_color = Color(1, 0, 0, 1)
shader_parameter/width = 0.0

[sub_resource type="AtlasTexture" id="AtlasTexture_r1mxx"]
atlas = ExtResource("2_a5y40")
region = Rect2(0, 0, 48, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_do5cp"]
atlas = ExtResource("3_6t8lt")
region = Rect2(0, 0, 48, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_b4juv"]
atlas = ExtResource("3_6t8lt")
region = Rect2(48, 0, 48, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_nejg1"]
atlas = ExtResource("3_6t8lt")
region = Rect2(96, 0, 48, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_r10ir"]
atlas = ExtResource("3_6t8lt")
region = Rect2(144, 0, 48, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_6t8lt"]
atlas = ExtResource("2_a5y40")
region = Rect2(48, 0, 48, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_jhwbb"]
atlas = ExtResource("2_a5y40")
region = Rect2(96, 0, 48, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_nc6fi"]
atlas = ExtResource("2_a5y40")
region = Rect2(144, 0, 48, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_tue7c"]
atlas = ExtResource("2_a5y40")
region = Rect2(192, 0, 48, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_pfysl"]
atlas = ExtResource("2_a5y40")
region = Rect2(240, 0, 48, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_7ugi3"]
atlas = ExtResource("2_a5y40")
region = Rect2(288, 0, 48, 32)

[sub_resource type="SpriteFrames" id="SpriteFrames_do5cp"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_r1mxx")
}],
"loop": true,
"name": &"idle",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_do5cp")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_b4juv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_nejg1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_r10ir")
}],
"loop": true,
"name": &"stun",
"speed": 9.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_6t8lt")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jhwbb")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_nc6fi")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_tue7c")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pfysl")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_7ugi3")
}],
"loop": true,
"name": &"walk",
"speed": 9.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_a5y40"]
radius = 10.0021

[sub_resource type="CircleShape2D" id="CircleShape2D_a5y40"]
radius = 26.403

[sub_resource type="Animation" id="Animation_r1mxx"]
resource_name = "RESET"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("AnimatedSprite2D:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("AnimatedSprite2D:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}

[sub_resource type="Animation" id="Animation_6t8lt"]
resource_name = "kick"
length = 0.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("AnimatedSprite2D:position")
tracks/0/interp = 2
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.25, 0.5),
"transitions": PackedFloat32Array(1, 2.21914, 2702.37),
"update": 0,
"values": [Vector2(0, 0), Vector2(0, -45), Vector2(0, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("AnimatedSprite2D:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.5),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [0.0, 6.28319]
}

[sub_resource type="Animation" id="Animation_jhwbb"]
resource_name = "stun"
length = 0.375
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("AnimatedSprite2D:position")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.125, 0.25, 0.375),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 0,
"values": [Vector2(0, 0), Vector2(-3, 0), Vector2(3, 0), Vector2(0, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("AnimatedSprite2D:rotation")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.125, 0.25, 0.375),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 0,
"values": [0.0, -0.523599, 0.523599, 0.0]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_6t8lt"]
_data = {
&"RESET": SubResource("Animation_r1mxx"),
&"kicked": SubResource("Animation_6t8lt"),
&"stun": SubResource("Animation_jhwbb")
}

[sub_resource type="Shader" id="Shader_6t8lt"]
code = "shader_type canvas_item;

uniform vec4 line_color : source_color = vec4(1.0); // Color of the outline
uniform float width : hint_range(0, 10) = 0.0; // Width of the outline


// Offsets to check neighboring pixels for the outline
const vec2 OFFSETS[8] = vec2[](
    vec2(-1, -1), vec2(-1, 0), vec2(-1, 1),
    vec2(0, -1), vec2(0, 1),
    vec2(1, -1), vec2(1, 0), vec2(1, 1)
);

void vertex() {
    // Add margin to the original sprite vertices based on the outline width
    // This scales up the sprite, which will be scaled down later in the fragment() function
    VERTEX += (UV * 2.0 - 1.0) * width;
}

void fragment() {
    // Sample the color from the original texture
    vec4 color = texture(TEXTURE, UV);

    if (width > 0.0) {
        // Calculate the real texture size from the texture pixel size
        vec2 real_texture_size = 1.0 / TEXTURE_PIXEL_SIZE;

        // Calculate the size of the texture with the added margin for the outline
        vec2 added_margin_texture_pixel_size = 1.0 / (real_texture_size + (width * 2.0));

        // Calculate the width in texture coordinates
        vec2 width_size = added_margin_texture_pixel_size * width;

        // Shift the UV coordinates to account for the added margin
        vec2 shifted_uv = UV - width_size;

        // Calculate the ratio to scale down the UV coordinates to the original size
        vec2 ratio = TEXTURE_PIXEL_SIZE / added_margin_texture_pixel_size;
        vec2 scaled_shifted_uv = shifted_uv * ratio;

        // Sample the original texture with the adjusted UV to scale it back to the original size
        vec4 original_color = texture(TEXTURE, scaled_shifted_uv);

        // Check if the adjusted UV coordinates are outside the bounds of the texture
        if (scaled_shifted_uv.x < 0.0 || scaled_shifted_uv.x > 1.0 || scaled_shifted_uv.y < 0.0 || scaled_shifted_uv.y > 1.0) {
            original_color.a = 0.0; // Set alpha to 0 to remove artifacts outside the sprite boundary
        }

        // Initialize the outline alpha value
        float outline = 0.0;

        // Sum the alpha values of the neighboring pixels to create the outline
        for (int i = 0; i < 8; i++) {
            outline += texture(TEXTURE, scaled_shifted_uv + OFFSETS[i] * width_size).a;

        }

        // Clamp the outline value to a maximum of 1.0
        outline = min(outline, 1.0);

        // Mix the original color with the outline color based on the outline alpha value
        color = mix(original_color, line_color, outline - original_color.a);
    }

    // Set the final color of the fragment
    COLOR = color;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_jhwbb"]
shader = SubResource("Shader_6t8lt")
shader_parameter/line_color = Color(1, 1, 1, 1)
shader_parameter/width = 0.25

[sub_resource type="AudioStreamRandomizer" id="AudioStreamRandomizer_6t8lt"]
resource_local_to_scene = true
random_pitch = 1.2
random_volume_offset_db = 1.6
streams_count = 1

[node name="Cow" instance=ExtResource("1_c136b")]
scale = Vector2(2.5, 2.5)
type = "Cow"

[node name="AnimatedSprite2D" parent="." index="0"]
material = SubResource("ShaderMaterial_nc6fi")
sprite_frames = SubResource("SpriteFrames_do5cp")
animation = &"idle"
autoplay = "walk"

[node name="CollisionShape2D" parent="." index="1"]
position = Vector2(-5, 0)
rotation = 1.57044
shape = SubResource("CapsuleShape2D_a5y40")

[node name="CollisionShape2D" parent="KickRange" index="0"]
shape = SubResource("CircleShape2D_a5y40")
debug_color = Color(0.87451, 0.247059, 0.619608, 0.419608)

[node name="AnimationPlayer" parent="." index="3"]
libraries = {
&"": SubResource("AnimationLibrary_6t8lt")
}

[node name="OffscreenPointer" parent="." index="6"]
texture = ExtResource("3_r1mxx")

[node name="KickIcon" parent="." index="9"]
material = SubResource("ShaderMaterial_jhwbb")

[node name="Ice" parent="." index="10"]
scale = Vector2(1.4, 1.4)

[node name="AudioStreamPlayer" parent="." index="12"]
stream = SubResource("AudioStreamRandomizer_6t8lt")
